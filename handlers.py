import logging
import re
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_ID, user_selections, active_users, admin_states, SUBJECTS_TOPICS
from keyboards import (
    main_keyboard, subjects_keyboard, topics_keyboard,
    admin_panel_keyboard, admin_cancel_keyboard, admin_users_keyboard
)
from services import notify_admin, handle_admin_broadcast, handle_admin_reply, send_message_to_user

logger = logging.getLogger(__name__)


async def send_message_with_notify(update, context, text, user_message=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞"""
    user = update.effective_user

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if user.id == ADMIN_ID and admin_states.get(user.id) == 'admin_panel':
        reply_markup = admin_panel_keyboard()
    else:
        reply_markup = main_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(text, reply_markup=reply_markup)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (–ë–ï–ó Markdown) - –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –∞–¥–º–∏–Ω–∞
    if user.id != ADMIN_ID:
        await notify_admin(context.application, user, text, user_message)


# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    if user.id in user_selections:
        del user_selections[user.id]

    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å –æ–≥—Ä–æ–º–Ω—ã–º –æ–ø—ã—Ç–æ–º –≤ —Å—Ñ–µ—Ä–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ù–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø–æ–ª–Ω—ã–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö.

–í–∞–∂–Ω—ã–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∑–∞ –≤–∞–º–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –í–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –±—É–¥–µ—Ç –Ω–∞ —Å–≤—è–∑–∏ 24/7, —á—Ç–æ–±—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å –≤–ø–ª–æ—Ç—å –¥–æ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã.

–ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≥–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Ç–µ–º—É. –ú—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã—Å—à–∏–π –±–∞–ª–ª.

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"""

    await send_message_with_notify(update, context, welcome_text, "/start")


async def handle_subjects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã:"
    await update.message.reply_text(text, reply_markup=subjects_keyboard())


async def handle_subject_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, subject: str):
    user = update.effective_user
    user_selections[user.id] = {'subject': subject}

    text = f"""üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject}

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º—É –∏–ª–∏ —É–∫–∞–∂–∏ —Å–≤–æ—é:"""

    await update.message.reply_text(text, reply_markup=topics_keyboard(subject))


async def handle_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, topic: str):
    user = update.effective_user

    if user.id in user_selections:
        subject = user_selections[user.id]['subject']
        user_selections[user.id]['topic'] = topic

        if topic == "–î—Ä—É–≥–∞—è —Ç–µ–º–∞ (—É—Ç–æ—á–Ω–∏—Ç—å)":
            text = f"""‚úèÔ∏è –í—ã–±—Ä–∞–Ω–∞ —Å–≤–æ—è —Ç–µ–º–∞

–ü—Ä–µ–¥–º–µ—Ç: {subject}

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–º—É –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã:"""
            await send_message_with_notify(update, context, text, f"–°–≤–æ—è —Ç–µ–º–∞ –¥–ª—è {subject}")
        else:
            text = f"""‚úÖ –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞!

üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}
üìù –¢–µ–º–∞: {topic}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 2500 —Ä—É–±.
‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 7 –¥–Ω–µ–π

üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏ 'üõí –ö–æ—Ä–∑–∏–Ω–∞'"""
            await send_message_with_notify(update, context, text, f"–¢–µ–º–∞: {topic} –¥–ª—è {subject}")


async def handle_custom_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    custom_topic = update.message.text

    if user.id in user_selections and 'subject' in user_selections[user.id]:
        subject = user_selections[user.id]['subject']
        user_selections[user.id]['topic'] = custom_topic

        text = f"""‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∞!

üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}
üìù –¢–µ–º–∞: {custom_topic}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 3000 —Ä—É–±. (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞)
‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 10 –¥–Ω–µ–π

üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏ 'üõí –ö–æ—Ä–∑–∏–Ω–∞'"""

        await send_message_with_notify(update, context, text, f"–°–≤–æ—è —Ç–µ–º–∞: {custom_topic} –¥–ª—è {subject}")
    else:
        await send_message_with_notify(update, context, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç üëÜ")


async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if user.id in user_selections:
        del user_selections[user.id]

    await send_message_with_notify(update, context, "üßπ –ß–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!\n\n–í—Å–µ –≤—ã–±–æ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.", "–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞")


# ==================== –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ====================
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    admin_states[user.id] = 'admin_panel'
    await update.message.reply_text("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel_keyboard())


async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    text = update.message.text

    if text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        await admin_users(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await admin_stats(update, context)
    elif text == 'üì¢ –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
        admin_states[user.id] = 'awaiting_broadcast'
        await update.message.reply_text(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=admin_cancel_keyboard()
        )
    elif text == 'üö™ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º':
        admin_states.pop(user.id, None)
        await update.message.reply_text("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", reply_markup=main_keyboard())
    elif text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        admin_states[user.id] = 'admin_panel'
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_panel_keyboard())
    elif text == '‚ùå –û—Ç–º–µ–Ω–∞':
        admin_states[user.id] = 'admin_panel'
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_panel_keyboard())


async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    if not active_users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=admin_panel_keyboard())
        return

    users_text = "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, user_info in active_users.items():
        users_text += f"üë§ {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        users_text += f"üÜî ID: {user_id}\n"
        if user_info.get('username'):
            users_text += f"üì± @{user_info['username']}\n"
        users_text += f"üìù {user_info.get('last_activity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        users_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

    users_text += f"\nüí° –í—Å–µ–≥–æ: {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    users_text += f"\n\nüí¨ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"

    await update.message.reply_text(users_text, reply_markup=admin_users_keyboard())


async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}
üìù –¢–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {len(user_selections)}"""

    await update.message.reply_text(stats_text, reply_markup=admin_panel_keyboard())


async def admin_reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reply ID —Ç–µ–∫—Å—Ç"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /reply ID –≤–∞—à_—Ç–µ–∫—Å—Ç\n\n–ü—Ä–∏–º–µ—Ä: /reply 123456789 –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        return

    try:
        target_user_id = int(context.args[0])
        reply_text = ' '.join(context.args[1:])

        success = await send_message_to_user(context, target_user_id, reply_text)

        if success:
            target_user_info = active_users.get(target_user_id, {})
            user_name = target_user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            success_msg = f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {target_user_id})"
            await update.message.reply_text(success_msg, reply_markup=admin_panel_keyboard())
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=admin_panel_keyboard())

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
        await update.message.reply_text(error_msg)


async def admin_reply_underscore(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reply_123456789 —Ç–µ–∫—Å—Ç"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    command_text = update.message.text

    try:
        parts = command_text.split('_', 1)
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /reply_123456789 –≤–∞—à_—Ç–µ–∫—Å—Ç")
            return

        rest = parts[1].strip()
        if not rest:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /reply_123456789 –≤–∞—à_—Ç–µ–∫—Å—Ç")
            return

        space_index = rest.find(' ')
        if space_index == -1:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ ID\n\n–ü—Ä–∏–º–µ—Ä: /reply_123456789 –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            return

        user_id_part = rest[:space_index]
        reply_text = rest[space_index:].strip()

        if not reply_text:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ ID")
            return

        target_user_id = int(user_id_part)
        success = await send_message_to_user(context, target_user_id, reply_text)

        if success:
            target_user_info = active_users.get(target_user_id, {})
            user_name = target_user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            success_msg = f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {target_user_id})"
            await update.message.reply_text(success_msg, reply_markup=admin_panel_keyboard())
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=admin_panel_keyboard())

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
        await update.message.reply_text(error_msg)


# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö ====================
async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    from telegram.ext import CallbackQueryHandler
    query = update.callback_query
    await query.answer()

    user = query.from_user
    if user.id != ADMIN_ID:
        return

    callback_data = query.data

    if callback_data.startswith('quick_reply_'):
        try:
            user_id = int(callback_data.split('_')[2])
            if user_id in active_users:
                admin_states[user.id] = {'mode': 'awaiting_reply', 'target_id': user_id}
                user_info = active_users[user_id]

                await query.edit_message_text(
                    text=query.message.text + f"\n\nüîÑ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {user_info['first_name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                    reply_markup=None
                )

                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['first_name']} (ID: {user_id}):",
                    reply_markup=admin_cancel_keyboard()
                )
            else:
                await context.bot.send_message(
                    chat_id=user.id,
                    text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=admin_panel_keyboard()
                )
        except (ValueError, IndexError):
            await context.bot.send_message(
                chat_id=user.id,
                text="‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞",
                reply_markup=admin_panel_keyboard()
            )


# ==================== –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ====================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if user.id == ADMIN_ID and admin_states.get(user.id):
        state = admin_states.get(user.id)

        if state == 'awaiting_broadcast':
            await handle_admin_broadcast(update, context)
        elif isinstance(state, dict) and state.get('mode') == 'awaiting_reply':
            await handle_admin_reply(update, context)
        elif text.startswith('üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å'):
            try:
                match = re.search(r'ID: (\d+)\)', text)
                if match:
                    user_id = int(match.group(1))
                    if user_id in active_users:
                        admin_states[user.id] = {'mode': 'awaiting_reply', 'target_id': user_id}
                        user_info = active_users[user_id]
                        await update.message.reply_text(
                            f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['first_name']} (ID: {user_id}):",
                            reply_markup=admin_cancel_keyboard()
                        )
                    else:
                        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_panel_keyboard())
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", reply_markup=admin_panel_keyboard())
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", reply_markup=admin_panel_keyboard())
        else:
            await handle_admin_buttons(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if text == 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã':
        await handle_subjects(update, context)
    elif text == '‚ÑπÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏–∏':
        await send_message_with_notify(update, context,
                                       "‚ÑπÔ∏è –ù–∞—à–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏:\n\n‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç\n‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤\n‚úÖ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
                                       "–ì–∞—Ä–∞–Ω—Ç–∏–∏")
    elif text == 'üí∞ –¶–µ–Ω—ã':
        await send_message_with_notify(update, context,
                                       "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\nüìù –ö—É—Ä—Å–æ–≤–∞—è: –æ—Ç 2000 —Ä—É–±.\n‚ö° –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑: +50%\nüìö –°–ª–æ–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: +30%",
                                       "–¶–µ–Ω—ã")
    elif text == 'üë®‚Äçüéì –û –Ω–∞—Å':
        await send_message_with_notify(update, context,
                                       "üë®‚Äçüéì –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä–æ–≤ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç!", "–û –Ω–∞—Å")
    elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        if user.id in user_selections and 'topic' in user_selections[user.id]:
            selection = user_selections[user.id]
            await send_message_with_notify(update, context,
                                           f"üõí –¢–≤–æ–π –∑–∞–∫–∞–∑:\n\n–ü—Ä–µ–¥–º–µ—Ç: {selection['subject']}\n–¢–µ–º–∞: {selection['topic']}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 2500 —Ä—É–±.\n\nüí≥ –†–∞–∑–¥–µ–ª –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
                                           "–ö–æ—Ä–∑–∏–Ω–∞")
        else:
            await send_message_with_notify(update, context, "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ä–∞–±–æ—Ç—ã!",
                                           "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await send_message_with_notify(update, context,
                                       "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\nüë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: @manager\nüìß Email: info@example.com",
                                       "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
    elif text == 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç':
        await clear_chat(update, context)
    elif text in SUBJECTS_TOPICS.keys():
        await handle_subject_selection(update, context, text)
    elif text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        await start(update, context)
    elif text == '‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞':
        await handle_subjects(update, context)
    elif text == 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await start(update, context)
    elif any(text in topics for topics in SUBJECTS_TOPICS.values()):
        await handle_topic_selection(update, context, text)
    elif user.id in user_selections and 'subject' in user_selections[user.id] and 'topic' not in user_selections[
        user.id]:
        await handle_custom_topic(update, context)
    else:
        await send_message_with_notify(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëÜ", text)