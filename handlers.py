import logging
import re
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from config import ADMIN_ID, SUBJECTS, SUBJECT_PRICES, SERVICE_PACKAGES, admin_states, ORDER_STATUSES
from database import db
from keyboards import (
    main_keyboard, subjects_keyboard, subject_selected_keyboard,
    service_packages_keyboard, consultation_keyboard, cart_keyboard,
    admin_panel_keyboard, admin_cancel_keyboard, admin_users_keyboard,
    admin_orders_keyboard, order_actions_keyboard, quick_reply_inline_keyboard
)
from services import notify_admin, handle_admin_broadcast, handle_admin_reply, send_message_to_user, \
    send_message_with_notify, notify_user_order_status

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    db.save_user(user.id, user.first_name, user.username)
    db.save_user_activity(user.id, "start", "/start")

    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å –æ–≥—Ä–æ–º–Ω—ã–º –æ–ø—ã—Ç–æ–º –≤ —Å—Ñ–µ—Ä–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ù–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø–æ–ª–Ω—ã–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö.

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"""

    await update.message.reply_text(welcome_text, reply_markup=main_keyboard())


async def handle_subjects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã:"
    await update.message.reply_text(text, reply_markup=subjects_keyboard())


async def handle_subject_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, subject: str):
    user = update.effective_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç, –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã
    db.save_user_selection(user.id, subject=subject, variant=None, package=None, price=None)
    db.save_user_activity(user.id, "subject_selection", f"–í—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç: {subject}")

    text = f"""üéØ –í—ã–±—Ä–∞–Ω: {subject}

üí° –£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –µ—Å—Ç—å —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–¥–∞–Ω–∏–π.

–ù–∞–∂–º–∏—Ç–µ "–í–≤–µ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"""

    await update.message.reply_text(text, reply_markup=subject_selected_keyboard())


async def handle_variant_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    user = update.effective_user
    variant = update.message.text.strip()

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}, –≤–∞—Ä–∏–∞–Ω—Ç '{variant}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä
    if not variant.isdigit():
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—Ü–∏—Ñ—Ä—ã).\n\n–ü—Ä–∏–º–µ—Ä: 27",
            reply_markup=subject_selected_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selection = db.get_user_selection(user.id)
    logger.info(f"–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {selection}")

    if not selection or not selection.get('subject'):
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç",
            reply_markup=subjects_keyboard()
        )
        return

    subject = selection['subject']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
    db.save_user_selection(user.id, variant=variant)
    db.save_user_activity(user.id, "variant_entered", f"–í–≤–µ–ª –≤–∞—Ä–∏–∞–Ω—Ç: {variant} –¥–ª—è {subject}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
    await show_service_packages(update, context, subject, variant)


async def show_service_packages(update: Update, context: ContextTypes.DEFAULT_TYPE, subject: str, variant: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    text = f"""üéØ –í–∞—Ä–∏–∞–Ω—Ç {variant} - {subject}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"""

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    prices = SUBJECT_PRICES.get(subject, {})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å —Ü–µ–Ω–∞–º–∏
    for package_key, package_info in SERVICE_PACKAGES.items():
        price = prices.get(package_key, 0)
        text += f"\n\n{package_info['name']}\n{package_info['description']}\nüí∞ {price} —Ä—É–±."

    text += "\n\nüí¨ –ò–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"

    await update.message.reply_text(text, reply_markup=service_packages_keyboard())


async def handle_package_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, package_key: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞"""
    user = update.effective_user

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selection = db.get_user_selection(user.id)
    if not selection or not selection.get('subject') or not selection.get('variant'):
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç",
            reply_markup=subjects_keyboard()
        )
        return

    subject = selection['subject']
    variant = selection['variant']

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    prices = SUBJECT_PRICES.get(subject, {})
    price = prices.get(package_key, 0)

    if price == 0:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ —Ü–µ–Ω—É
    db.save_user_selection(user.id, package=package_key, price=price)
    db.save_user_activity(user.id, "package_selected",
                          f"–í—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ {package_key} –∑–∞ {price} —Ä—É–±. –¥–ª—è {subject} –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(update, context)


async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    user = update.effective_user
    selection = db.get_user_selection(user.id)

    if not selection or not selection.get('subject') or not selection.get('variant') or not selection.get('package'):
        await update.message.reply_text(
            "‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_keyboard()
        )
        return

    subject = selection['subject']
    variant = selection['variant']
    package_key = selection['package']
    price = selection['price']

    package_info = SERVICE_PACKAGES.get(package_key, {})
    package_name = package_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ')

    cart_text = f"""üõí –í–∞—à –∑–∞–∫–∞–∑:

üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}
üî¢ –í–∞—Ä–∏–∞–Ω—Ç: {variant}
üì¶ –¢–∞—Ä–∏—Ñ: {package_name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá"""

    await update.message.reply_text(cart_text, reply_markup=cart_keyboard())
    db.save_user_activity(user.id, "cart_view", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã")


async def handle_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    user = update.effective_user

    selection = db.get_user_selection(user.id)
    subject = selection.get('subject', '–ù–µ –≤—ã–±—Ä–∞–Ω') if selection else '–ù–µ –≤—ã–±—Ä–∞–Ω'
    variant = selection.get('variant', '–ù–µ —É–∫–∞–∑–∞–Ω') if selection else '–ù–µ —É–∫–∞–∑–∞–Ω'

    text = f"""üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è

–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} (–≤–∞—Ä–∏–∞–Ω—Ç {variant}) —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:

üë§ @manager
üìß info@example.com

–ú—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º!"""

    await update.message.reply_text(text, reply_markup=consultation_keyboard())
    db.save_user_activity(user.id, "consultation_request", "–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")


async def create_order_from_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    user = update.effective_user
    selection = db.get_user_selection(user.id)

    if not selection or not selection.get('subject') or not selection.get('variant') or not selection.get('package'):
        await update.message.reply_text("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã", reply_markup=main_keyboard())
        return

    subject = selection['subject']
    variant = selection['variant']
    package_key = selection['package']
    price = selection['price']

    package_info = SERVICE_PACKAGES.get(package_key, {})
    package_name = package_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ')

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order_id = db.create_order(user.id, subject, variant, package_name, price)

    if order_id:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        await notify_admin_new_order(context, user, order_id, subject, variant, package_name, price)

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.delete_user_selection(user.id)

        order_text = f"""‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!

üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}
üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}
üî¢ –í–∞—Ä–∏–∞–Ω—Ç: {variant}
üì¶ –¢–∞—Ä–∏—Ñ: {package_name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.
üìû –°—Ç–∞—Ç—É—Å: {ORDER_STATUSES['working']}

üí¨ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."""

        await update.message.reply_text(order_text, reply_markup=main_keyboard())
        db.save_user_activity(user.id, "order_created", f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order_id}")

    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", reply_markup=main_keyboard())


async def notify_admin_new_order(context, user, order_id, subject, variant, package, price):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        admin_message = f"""üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
üÜî ID: {user.id}
üë§ –ò–º—è: {user.first_name}
üì± @{user.username if user.username else '–Ω–µ—Ç'}

üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}
üî¢ –í–∞—Ä–∏–∞–Ω—Ç: {variant}
üì¶ –¢–∞—Ä–∏—Ñ: {package}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_message,
            reply_markup=order_actions_keyboard(order_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: {e}")


async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    db.delete_user_selection(user.id)
    db.save_user_activity(user.id, "clear_chat", "–û—á–∏—Å—Ç–∏–ª —á–∞—Ç")

    await update.message.reply_text(
        "üßπ –ß–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!\n\n–í—Å–µ –≤—ã–±–æ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.",
        reply_markup=main_keyboard()
    )


async def handle_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    selection = db.get_user_selection(user.id)

    if selection and selection.get('subject') and selection.get('variant') and selection.get('package'):
        await show_cart(update, context)
    else:
        await update.message.reply_text(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Ç–∞—Ä–∏—Ñ!",
            reply_markup=main_keyboard()
        )
        db.save_user_activity(user.id, "empty_cart", "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")


# –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    admin_states[user.id] = 'admin_panel'
    await update.message.reply_text("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel_keyboard())


async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    text = update.message.text

    if text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        await admin_users(update, context)
    elif text == 'üì¶ –ó–∞–∫–∞–∑—ã':
        await admin_orders(update, context)
    elif text == 'üì¢ –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
        admin_states[user.id] = 'awaiting_broadcast'
        await update.message.reply_text(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=admin_cancel_keyboard()
        )
    elif text == 'üö™ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º':
        admin_states.pop(user.id, None)
        await update.message.reply_text("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", reply_markup=main_keyboard())
    elif text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        admin_states[user.id] = 'admin_panel'
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_panel_keyboard())
    elif text == '‚ùå –û—Ç–º–µ–Ω–∞':
        admin_states[user.id] = 'admin_panel'
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_panel_keyboard())
    elif text in ['üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã', '‚úÖ –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', 'üîÑ –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ']:
        await handle_orders_filter(update, context, text)


async def admin_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    admin_states[user.id] = 'admin_orders'
    await update.message.reply_text(
        "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤:",
        reply_markup=admin_orders_keyboard()
    )


async def handle_orders_filter(update: Update, context: ContextTypes.DEFAULT_TYPE, filter_type: str):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    if filter_type == 'üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã':
        orders = db.get_orders("all")
        await show_orders_list(update, orders, "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")
    elif filter_type == '‚úÖ –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã':
        orders = db.get_orders(ORDER_STATUSES['ready'])
        await show_orders_list(update, orders, "‚úÖ –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")
    elif filter_type == 'üîÑ –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ':
        orders = db.get_orders(ORDER_STATUSES['working'])
        await show_individual_orders(update, orders, "üîÑ –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ")
    else:
        return


async def show_orders_list(update: Update, orders: list, title: str):
    if not orders:
        await update.message.reply_text(
            f"‚ùå {title.split(' ')[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=admin_orders_keyboard()
        )
        return

    orders_text = f"{title} ({len(orders)} —à—Ç.):\n\n"

    for i, order in enumerate(orders, 1):
        orders_text += f"üîπ –ó–∞–∫–∞–∑ #{order['order_id']}\n"
        orders_text += f"üë§ {order['first_name']}"
        if order['username']:
            orders_text += f" (@{order['username']})"
        orders_text += f"\nüìö {order['subject']}\n"
        orders_text += f"üî¢ –í–∞—Ä–∏–∞–Ω—Ç: {order['variant']}\n"
        orders_text += f"üì¶ –¢–∞—Ä–∏—Ñ: {order['package']}\n"
        orders_text += f"üí∞ {order['price']} —Ä—É–±. | {order['status']}\n"
        orders_text += f"‚è∞ {order['created_at'][:16]}\n"

        if order['admin_comment']:
            orders_text += f"üí¨ {order['admin_comment']}\n"

        orders_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

    await update.message.reply_text(orders_text, reply_markup=admin_orders_keyboard())


async def show_individual_orders(update: Update, orders: list, title: str):
    if not orders:
        await update.message.reply_text(
            f"‚ùå {title.split(' ')[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=admin_orders_keyboard()
        )
        return

    await update.message.reply_text(f"{title} ({len(orders)} —à—Ç.):")

    for order in orders:
        order_text = f"""üîπ –ó–∞–∫–∞–∑ #{order['order_id']}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
‚îú –ò–º—è: {order['first_name']}
‚îú ID: {order['user_id']}
‚îî @{order['username'] if order['username'] else '–Ω–µ—Ç'}

üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
‚îú –ü—Ä–µ–¥–º–µ—Ç: {order['subject']}
‚îú –í–∞—Ä–∏–∞–Ω—Ç: {order['variant']}
‚îú –¢–∞—Ä–∏—Ñ: {order['package']}
‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['price']} —Ä—É–±.
‚îú –°—Ç–∞—Ç—É—Å: {order['status']}
‚îî –°–æ–∑–¥–∞–Ω: {order['created_at'][:16]}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['admin_comment'] or '–Ω–µ—Ç'}"""

        await update.message.reply_text(
            order_text,
            reply_markup=order_actions_keyboard(order['order_id'])
        )


async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active_users = db.get_active_users(24)

    if not active_users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=admin_panel_keyboard())
        return

    users_text = "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):\n\n"
    for user_id, user_info in active_users.items():
        users_text += f"üë§ {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        users_text += f"üÜî ID: {user_id}\n"
        if user_info.get('username'):
            users_text += f"üì± @{user_info['username']}\n"
        users_text += f"üìù {user_info.get('last_activity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        users_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

    users_text += f"\nüí° –í—Å–µ–≥–æ: {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    users_text += f"\n\nüí¨ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"

    await update.message.reply_text(users_text, reply_markup=admin_users_keyboard())


async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = db.get_user_stats()

    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats['active_today']}
üìù –¢–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['current_orders']}"""

    await update.message.reply_text(stats_text, reply_markup=admin_panel_keyboard())


async def admin_reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: /reply ID –≤–∞—à_—Ç–µ–∫—Å—Ç\n\n–ü—Ä–∏–º–µ—Ä: /reply 123456789 –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        return

    try:
        target_user_id = int(context.args[0])
        reply_text = ' '.join(context.args[1:])

        success = await send_message_to_user(context, target_user_id, reply_text, update)

        if success:
            active_users = db.get_active_users(1)
            target_user_info = active_users.get(target_user_id, {})
            user_name = target_user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            success_msg = f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {target_user_id})"
            await update.message.reply_text(success_msg, reply_markup=admin_panel_keyboard())
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=admin_panel_keyboard())

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
        await update.message.reply_text(error_msg)


async def admin_reply_underscore(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    command_text = update.message.text

    try:
        parts = command_text.split('_', 1)
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /reply_123456789 –≤–∞—à_—Ç–µ–∫—Å—Ç")
            return

        rest = parts[1].strip()
        if not rest:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /reply_123456789 –≤–∞—à_—Ç–µ–∫—Å—Ç")
            return

        space_index = rest.find(' ')
        if space_index == -1:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ ID\n\n–ü—Ä–∏–º–µ—Ä: /reply_123456789 –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            return

        user_id_part = rest[:space_index]
        reply_text = rest[space_index:].strip()

        if not reply_text:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ ID")
            return

        target_user_id = int(user_id_part)
        success = await send_message_to_user(context, target_user_id, reply_text, update)

        if success:
            active_users = db.get_active_users(1)
            target_user_info = active_users.get(target_user_id, {})
            user_name = target_user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            success_msg = f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {target_user_id})"
            await update.message.reply_text(success_msg, reply_markup=admin_panel_keyboard())
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=admin_panel_keyboard())

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
        await update.message.reply_text(error_msg)


async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    if user.id != ADMIN_ID:
        return

    callback_data = query.data

    if callback_data.startswith('quick_reply_'):
        try:
            user_id = int(callback_data.split('_')[2])
            active_users = db.get_active_users(1)

            if user_id in active_users:
                admin_states[user.id] = {'mode': 'awaiting_reply', 'target_id': user_id}
                user_info = active_users[user_id]

                await query.edit_message_text(
                    text=query.message.text + f"\n\nüîÑ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {user_info['first_name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                    reply_markup=None
                )

                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['first_name']} (ID: {user_id}):",
                    reply_markup=admin_cancel_keyboard()
                )
            else:
                await context.bot.send_message(
                    chat_id=user.id,
                    text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=admin_panel_keyboard()
                )
        except (ValueError, IndexError):
            await context.bot.send_message(
                chat_id=user.id,
                text="‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞",
                reply_markup=admin_panel_keyboard()
            )

    elif callback_data.startswith('order_'):
        await handle_order_actions(update, context, callback_data)


async def handle_order_actions(update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    if user.id != ADMIN_ID:
        return

    try:
        action, order_id = callback_data.split('_')[1], int(callback_data.split('_')[2])

        if action == 'ready':
            success = db.update_order_status(order_id, ORDER_STATUSES['ready'])
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                orders = db.get_orders("all")
                target_order = next((o for o in orders if o['order_id'] == order_id), None)
                if target_order:
                    await notify_user_order_status(context, target_order['user_id'], order_id, ORDER_STATUSES['ready'])

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
                await query.delete_message()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∏ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞",
                    reply_markup=admin_orders_keyboard()
                )

        elif action == 'delete':
            success = db.delete_order(order_id)
            if success:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
                await query.delete_message()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"üóëÔ∏è –ó–∞–∫–∞–∑ #{order_id} —É–¥–∞–ª–µ–Ω",
                    reply_markup=admin_orders_keyboard()
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º: {e}")
        await context.bot.send_message(
            chat_id=user.id,
            text="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=admin_panel_keyboard()
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    db.save_user(user.id, user.first_name, user.username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞
    if user.id == ADMIN_ID and admin_states.get(user.id):
        state = admin_states.get(user.id)

        if state == 'awaiting_broadcast':
            await handle_admin_broadcast(update, context)
        elif isinstance(state, dict) and state.get('mode') == 'awaiting_reply':
            await handle_admin_reply(update, context)
        elif isinstance(state, dict) and state.get('mode') == 'order_comment':
            await handle_order_comment(update, context)
        elif text.startswith('üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å'):
            try:
                match = re.search(r'ID: (\d+)\)', text)
                if match:
                    user_id = int(match.group(1))
                    active_users = db.get_active_users(1)

                    if user_id in active_users:
                        admin_states[user.id] = {'mode': 'awaiting_reply', 'target_id': user_id}
                        user_info = active_users[user_id]
                        await update.message.reply_text(
                            f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['first_name']} (ID: {user_id}):",
                            reply_markup=admin_cancel_keyboard()
                        )
                    else:
                        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_panel_keyboard())
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", reply_markup=admin_panel_keyboard())
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", reply_markup=admin_panel_keyboard())
        else:
            await handle_admin_buttons(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text == 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã':
        db.save_user_activity(user.id, "menu_click", "–ü—Ä–µ–¥–º–µ—Ç—ã")
        await handle_subjects(update, context)

    elif text == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç':
        db.save_user_activity(user.id, "menu_click", "–í–≤–µ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç")
        await update.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 27, 15, 8 –∏ —Ç.–¥.\n\n(–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —á–∞—Ç)",
            reply_markup=subject_selected_keyboard()
        )

    elif text in ['üèóÔ∏è –ë–ê–ó–û–í–´–ô', 'üìä –°–¢–ê–ù–î–ê–†–¢', 'üíé –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô']:
        db.save_user_activity(user.id, "menu_click", f"–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞: {text}")
        package_map = {
            'üèóÔ∏è –ë–ê–ó–û–í–´–ô': 'basic',
            'üìä –°–¢–ê–ù–î–ê–†–¢': 'standard',
            'üíé –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô': 'individual'
        }
        package_key = package_map.get(text)
        if package_key:
            await handle_package_selection(update, context, package_key)

    elif text == 'üìû –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é':
        db.save_user_activity(user.id, "menu_click", "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
        await handle_consultation(update, context)

    elif text == 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º':
        db.save_user_activity(user.id, "menu_click", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        await update.message.reply_text(
            "üë§ –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: @manager\n\nüí¨ –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!",
            reply_markup=consultation_keyboard()
        )

    elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        db.save_user_activity(user.id, "menu_click", "–ö–æ—Ä–∑–∏–Ω–∞")
        await handle_cart(update, context)

    elif text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        db.save_user_activity(user.id, "menu_click", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
        await create_order_from_cart(update, context)

    elif text in SUBJECTS:
        db.save_user_activity(user.id, "subject_selected", text)
        await handle_subject_selection(update, context, text)

    elif text in ['‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
        db.save_user_activity(user.id, "menu_click", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await start(update, context)

    elif text == '‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞':
        db.save_user_activity(user.id, "menu_click", "–ö –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞")
        await handle_subjects(update, context)

    elif text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º':
        db.save_user_activity(user.id, "menu_click", "–ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º")
        selection = db.get_user_selection(user.id)
        if selection and selection.get('subject') and selection.get('variant'):
            await show_service_packages(update, context, selection['subject'], selection['variant'])
        else:
            await handle_subjects(update, context)

    elif text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        db.save_user_activity(user.id, "menu_click", "–ù–∞–∑–∞–¥")
        selection = db.get_user_selection(user.id)
        if selection and selection.get('subject'):
            await handle_subject_selection(update, context, selection['subject'])
        else:
            await handle_subjects(update, context)

    elif text == 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç':
        db.save_user_activity(user.id, "menu_click", "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
        await clear_chat(update, context)

    elif text == '‚ÑπÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏–∏':
        db.save_user_activity(user.id, "menu_click", "–ì–∞—Ä–∞–Ω—Ç–∏–∏")
        await send_message_with_notify(update, context,
                                       "‚ÑπÔ∏è –ù–∞—à–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏:\n\n‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç\n‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤\n‚úÖ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
                                       "–ì–∞—Ä–∞–Ω—Ç–∏–∏")

    elif text == 'üí∞ –¶–µ–Ω—ã':
        db.save_user_activity(user.id, "menu_click", "–¶–µ–Ω—ã")
        await send_message_with_notify(update, context,
                                       "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\nüìù –ö—É—Ä—Å–æ–≤–∞—è: –æ—Ç 2500 —Ä—É–±.\nüìä –°—Ç–∞–Ω–¥–∞—Ä—Ç: –æ—Ç 4500 —Ä—É–±.\nüíé –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π: –æ—Ç 6500 —Ä—É–±.",
                                       "–¶–µ–Ω—ã")

    elif text == 'üë®‚Äçüéì –û –Ω–∞—Å':
        db.save_user_activity(user.id, "menu_click", "–û –Ω–∞—Å")
        await send_message_with_notify(update, context,
                                       "üë®‚Äçüéì –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä–æ–≤ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç!", "–û –Ω–∞—Å")

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        db.save_user_activity(user.id, "menu_click", "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
        await send_message_with_notify(update, context,
                                       "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\nüë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: @manager\nüìß Email: info@example.com",
                                       "–ö–æ–Ω—Ç–∞–∫—Ç—ã")

    else:
        db.save_user_activity(user.id, "unknown_message", text)
        await send_message_with_notify(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëÜ", text)


async def handle_order_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    state = admin_states.get(user.id)
    if isinstance(state, dict) and state.get('mode') == 'order_comment':
        order_id = state.get('order_id')
        comment = update.message.text

        if comment == '‚ùå –û—Ç–º–µ–Ω–∞':
            admin_states[user.id] = 'admin_panel'
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_panel_keyboard())
            return

        success = db.update_order_comment(order_id, comment)
        if success:
            admin_states[user.id] = 'admin_panel'
            await update.message.reply_text(
                f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}",
                reply_markup=admin_panel_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
                reply_markup=admin_panel_keyboard()
            )