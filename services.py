import logging
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_ID, PRICES
from database import db
from keyboards import quick_reply_inline_keyboard, admin_panel_keyboard, admin_cancel_keyboard

logger = logging.getLogger(__name__)


async def notify_admin(application, user, message, user_message=None):
    if user.id == ADMIN_ID:
        return

    try:
        db.save_user(user.id, user.first_name, user.username)
        db.save_user_activity(
            user_id=user.id,
            activity_type="user_message",
            message_text=user_message,
            bot_response=message
        )

        admin_message = "üë§ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n\n"
        admin_message += f"üÜî ID: {user.id}\n"
        admin_message += f"üë§ –ò–º—è: {user.first_name}\n"
        if user.username:
            admin_message += f"üì± @{user.username}\n"

        if user_message:
            admin_message += f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_message}\n"

        admin_message += f"\nüì® –û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n{message}"

        await application.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_message,
            reply_markup=quick_reply_inline_keyboard(user.id, user.first_name)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")


async def send_message_with_notify(update, context, text, user_message=None):
    user = update.effective_user

    from config import admin_states
    if user.id == ADMIN_ID and admin_states.get(user.id) == 'admin_panel':
        from keyboards import admin_panel_keyboard
        reply_markup = admin_panel_keyboard()
    else:
        from keyboards import main_keyboard
        reply_markup = main_keyboard()

    await update.message.reply_text(text, reply_markup=reply_markup)

    if user.id != ADMIN_ID:
        await notify_admin(context.application, user, text, user_message)


async def send_message_to_user(context, target_user_id, reply_text, update):
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{reply_text}"
        )

        db.save_user_activity(
            user_id=target_user_id,
            activity_type="admin_reply",
            message_text=reply_text,
            bot_response="–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        )

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        return False


async def handle_admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import admin_states, ADMIN_ID

    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        admin_states[user.id] = 'admin_panel'
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel_keyboard())
        return

    active_users = db.get_active_users(24)
    if not active_users:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                                        reply_markup=admin_panel_keyboard())
        return

    broadcast_text = update.message.text
    successful = 0
    failed = 0

    for user_id in active_users.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{broadcast_text}"
            )
            successful += 1

            db.save_user_activity(
                user_id=user_id,
                activity_type="broadcast",
                message_text=broadcast_text,
                bot_response="–†–∞—Å—Å—ã–ª–∫–∞"
            )
        except Exception as e:
            failed += 1
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    admin_states[user.id] = 'admin_panel'
    await update.message.reply_text(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}",
        reply_markup=admin_panel_keyboard()
    )


async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import admin_states, ADMIN_ID

    user = update.effective_user
    if user.id != ADMIN_ID:
        return

    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        admin_states[user.id] = 'admin_panel'
        await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=admin_panel_keyboard())
        return

    state = admin_states.get(user.id)
    if isinstance(state, dict) and state.get('mode') == 'awaiting_reply':
        target_id = state.get('target_id')
        reply_text = update.message.text

        success = await send_message_to_user(context, target_id, reply_text, update)

        if success:
            active_users = db.get_active_users(1)
            target_user_info = active_users.get(target_id, {})
            user_name = target_user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            admin_states[user.id] = 'admin_panel'
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {target_id})",
                reply_markup=admin_panel_keyboard()
            )
        else:
            admin_states[user.id] = 'admin_panel'
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                reply_markup=admin_panel_keyboard()
            )