import logging
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_ID, active_users, admin_states
from keyboards import admin_panel_keyboard, admin_cancel_keyboard, quick_reply_inline_keyboard

logger = logging.getLogger(__name__)


async def notify_admin(application, user, message, user_message=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π"""
    if user.id == ADMIN_ID:
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        active_users[user.id] = {
            'first_name': user.first_name,
            'username': user.username,
            'last_activity': user_message or message
        }

        # –§–û–†–ú–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ë–ï–ó MARKDOWN - –ü–†–û–°–¢–û–ô –¢–ï–ö–°–¢
        admin_message = "üë§ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n\n"
        admin_message += f"üÜî ID: {user.id}\n"
        admin_message += f"üë§ –ò–º—è: {user.first_name}\n"
        if user.username:
            admin_message += f"üì± @{user.username}\n"

        if user_message:
            admin_message += f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_message}\n"

        admin_message += f"\nüì® –û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n{message}"

        # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ë–ï–ó parse_mode - –ü–†–û–°–¢–û–ô –¢–ï–ö–°–¢
        await application.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_message,
            reply_markup=quick_reply_inline_keyboard(user.id, user.first_name)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")


async def send_message_to_user(context, target_user_id, reply_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{reply_text}"
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        return False


async def handle_admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        admin_states[update.effective_user.id] = 'admin_panel'
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel_keyboard())
        return

    if not active_users:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                                        reply_markup=admin_panel_keyboard())
        return

    broadcast_text = update.message.text
    successful = 0
    failed = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    for user_id in active_users.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{broadcast_text}"
            )
            successful += 1
        except Exception as e:
            failed += 1
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    admin_states[update.effective_user.id] = 'admin_panel'
    await update.message.reply_text(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}",
        reply_markup=admin_panel_keyboard()
    )


async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        admin_states[update.effective_user.id] = 'admin_panel'
        await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=admin_panel_keyboard())
        return

    state = admin_states.get(update.effective_user.id)
    if isinstance(state, dict) and state.get('mode') == 'awaiting_reply':
        target_id = state.get('target_id')
        reply_text = update.message.text

        success = await send_message_to_user(context, target_id, reply_text)

        if success:
            target_user_info = active_users.get(target_id, {})
            user_name = target_user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            admin_states[update.effective_user.id] = 'admin_panel'
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {target_id})",
                reply_markup=admin_panel_keyboard()
            )
        else:
            admin_states[update.effective_user.id] = 'admin_panel'
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                reply_markup=admin_panel_keyboard()
            )